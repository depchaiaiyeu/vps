name: VPS + Puppeteer Optimized
on:
  workflow_dispatch:
jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 35
    steps:
      - uses: actions/checkout@v4
      
      - name: System Optimization
        run: |
          echo "Optimizing system performance..."
          sudo sysctl -w vm.swappiness=10
          sudo sysctl -w vm.vfs_cache_pressure=50
          sudo sysctl -w net.core.rmem_max=134217728
          sudo sysctl -w net.core.wmem_max=134217728
          sudo sysctl -w net.ipv4.tcp_rmem="4096 65536 134217728"
          sudo sysctl -w net.ipv4.tcp_wmem="4096 65536 134217728"
          sudo sysctl -w net.core.netdev_max_backlog=5000
          ulimit -n 65536
          sudo apt-get clean
          sudo apt-get autoremove -y
          
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            wget unzip curl git ca-certificates gnupg lsb-release \
            fonts-liberation libx11-xcb1 libxcomposite1 libxcursor1 \
            libxdamage1 libxi6 libxtst6 libnss3 libxrandr2 libatk1.0-0 \
            libatk-bridge2.0-0 libcups2 libdbus-1-3 libdrm2 libxss1 \
            libgbm1 xdg-utils libasound2t64 libxshmfence1
            
      - name: Install Chrome
        run: |
          wget -q -O google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome.deb || sudo apt-get install -f -y
          google-chrome --version
          
      - name: Install Node.js
        run: |
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs
          npm config set registry https://registry.npmjs.org/
          npm config set fetch-retries 5
          npm config set fetch-retry-factor 2
          npm config set fetch-retry-mintimeout 10000
          npm config set fetch-retry-maxtimeout 60000
          node --version
          npm --version
          
      - name: Install Puppeteer Dependencies
        run: |
          npm install --silent puppeteer-real-browser hpack
          git clone --depth 1 https://github.com/depchaiaiyeu/dos-bot
          cd dos-bot
          if [ -f "package.json" ]; then
            npm install --silent --production
          fi
          
      - name: Setup Performance Monitoring
        run: |
          cat > monitor.sh << 'EOF'
          #!/bin/bash
          while true; do
            echo "=== $(date) ==="
            echo "Memory Usage:"
            free -h
            echo "CPU Usage:"
            top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1
            echo "Disk Usage:"
            df -h / | tail -1 | awk '{print $5}'
            echo "Network:"
            cat /proc/net/dev | grep eth0 || cat /proc/net/dev | grep ens
            echo "===================="
            sleep 30
          done
          EOF
          chmod +x monitor.sh
          
      - name: Setup tmate
        run: |
          curl -fsSL https://github.com/tmate-io/tmate/releases/download/2.4.0/tmate-2.4.0-static-linux-amd64.tar.xz | tar -xJ
          chmod +x tmate-2.4.0-static-linux-amd64/tmate
          ./tmate-2.4.0-static-linux-amd64/tmate -S /tmp/tmate new-session -d "cd dos-bot && bash"
          sleep 10
          SSH_LINK=$(./tmate-2.4.0-static-linux-amd64/tmate -S /tmp/tmate display -p '#{tmate_ssh}')
          WEB_LINK=$(./tmate-2.4.0-static-linux-amd64/tmate -S /tmp/tmate display -p '#{tmate_web}')
          echo "========================================"
          echo "VPS READY - Optimized Configuration"
          echo "========================================"
          echo "SSH Access: $SSH_LINK"
          echo "Web Access: $WEB_LINK"
          echo "========================================"
          echo "System Info:"
          echo "CPU Cores: $(nproc)"
          echo "Memory: $(free -h | awk '/^Mem:/ {print $2}')"
          echo "Chrome: $(google-chrome --version)"
          echo "Node.js: $(node --version)"
          echo "========================================"
          
      - name: Keep alive
        run: |
          nohup ./monitor.sh > monitor.log 2>&1 &
          cat > healthcheck.sh << 'EOF'
          #!/bin/bash
          start_time=$(date +%s)
          target_duration=1800
          
          echo "VPS will run for exactly 30 minutes"
          echo "Started at: $(date)"
          
          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            remaining=$((target_duration - elapsed))
            
            if [ $remaining -le 0 ]; then
              echo "30 minutes completed! Shutting down gracefully..."
              break
            fi
            
            if [ $((elapsed % 300)) -eq 0 ]; then
              echo "Running time: $((elapsed/60)) minutes, Remaining: $((remaining/60)) minutes"
              
              if ! pgrep -f "tmate" > /dev/null; then
                echo "tmate process died, restarting..."
                ./tmate-2.4.0-static-linux-amd64/tmate -S /tmp/tmate new-session -d "cd dos-bot && bash"
              fi
              
              if [ $((elapsed % 600)) -eq 0 ]; then
                echo "Performing memory cleanup..."
                sync && echo 1 | sudo tee /proc/sys/vm/drop_caches > /dev/null
              fi
            fi
            
            sleep 30
          done
          EOF
          chmod +x healthcheck.sh
          ./healthcheck.sh
          
      - name: Final Cleanup
        if: always()
        run: |
          echo "Session completed successfully!"
          echo "Final system status:"
          free -h
          df -h
          uptime
